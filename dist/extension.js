"use strict";var i=Object.create;var a=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,l=Object.prototype.hasOwnProperty;var p=(e,s)=>{for(var t in s)a(e,t,{get:s[t],enumerable:!0})},c=(e,s,t,r)=>{if(s&&typeof s=="object"||typeof s=="function")for(let n of g(s))!l.call(e,n)&&n!==t&&a(e,n,{get:()=>s[n],enumerable:!(r=d(s,n))||r.enumerable});return e};var v=(e,s,t)=>(t=e!=null?i(w(e)):{},c(s||!e||!e.__esModule?a(t,"default",{value:e,enumerable:!0}):t,e)),m=e=>c(a({},"__esModule",{value:!0}),e);var x={};p(x,{activate:()=>f,deactivate:()=>h});module.exports=m(x);var o=v(require("vscode"));function f(e){let s=o.commands.registerCommand("vscode-test-generator.generateRtlTests",async t=>{t.fsPath.endsWith(".tsx")?await u(t.fsPath):o.window.showErrorMessage("Please select a .tsx file")});e.subscriptions.push(s)}async function u(e){let s=e.replace(".tsx",".spec.tsx");try{let t=await o.commands.executeCommand("github.copilot.chat.generateTests",{content:e,language:"tsx"});if(t){let r=await o.workspace.openTextDocument({content:t,language:"typescriptreact"}),n=new o.WorkspaceEdit;n.createFile(o.Uri.file(s),{overwrite:!0}),await o.workspace.applyEdit(n),o.window.showInformationMessage(`Test file generated: ${s}`)}else o.window.showErrorMessage("Could not generate tests using Copilot")}catch(t){o.window.showErrorMessage(`Error generating tests: ${t instanceof Error?t.message:"Unknown error"}`)}}function h(){}0&&(module.exports={activate,deactivate});
